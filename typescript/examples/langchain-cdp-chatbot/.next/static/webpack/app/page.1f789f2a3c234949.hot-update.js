"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/hooks/useChatbot.ts":
/*!*********************************!*\
  !*** ./src/hooks/useChatbot.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChatbot: function() { return /* binding */ useChatbot; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _services_chatbot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/services/chatbot */ \"(app-pages-browser)/./src/services/chatbot.ts\");\n/* harmony import */ var _lib_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/storage */ \"(app-pages-browser)/./src/lib/storage.ts\");\n/* harmony import */ var _services_taxiService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/taxiService */ \"(app-pages-browser)/./src/services/taxiService.ts\");\n/* __next_internal_client_entry_do_not_use__ useChatbot auto */ \n\n\n\nfunction useChatbot() {\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Load chat history from localStorage on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const savedMessages = localStorage.getItem(\"chat_history\");\n        if (savedMessages) {\n            setMessages(JSON.parse(savedMessages));\n        }\n    }, []);\n    // Save messages to localStorage whenever they change\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n    }, [\n        messages\n    ]);\n    const handleScheduleConflict = (newEvent, existingEvents)=>{\n        console.log(\"Checking conflicts for new event:\", {\n            title: newEvent.title,\n            start: newEvent.startTime,\n            priority: newEvent.priority\n        });\n        console.log(\"Existing events:\", existingEvents);\n        // Sort existing events by priority\n        const priorityOrder = {\n            \"urgent-important\": 3,\n            \"important\": 2,\n            \"urgent\": 1,\n            \"neither\": 0\n        };\n        // Find conflicting events\n        const conflicts = existingEvents.filter((event)=>{\n            const newStart = new Date(newEvent.startTime);\n            const newEnd = new Date(newEvent.endTime);\n            const eventStart = new Date(event.startTime);\n            const eventEnd = new Date(event.endTime);\n            const hasConflict = newStart >= eventStart && newStart < eventEnd || newEnd > eventStart && newEnd <= eventEnd || newStart <= eventStart && newEnd >= eventEnd;\n            if (hasConflict) {\n                console.log(\"Found conflict:\", {\n                    existingEvent: event.title,\n                    existingPriority: event.priority,\n                    newEvent: newEvent.title,\n                    newPriority: newEvent.priority\n                });\n            }\n            return hasConflict;\n        });\n        if (conflicts.length === 0) {\n            console.log(\"No conflicts found\");\n            return newEvent;\n        }\n        // Check if new event has higher priority\n        const newPriorityScore = priorityOrder[newEvent.priority];\n        const highestConflictScore = Math.max(...conflicts.map((e)=>priorityOrder[e.priority]));\n        console.log(\"Priority comparison:\", {\n            newEventScore: newPriorityScore,\n            highestConflictScore,\n            willRescheduleConflicts: newPriorityScore > highestConflictScore\n        });\n        if (newPriorityScore > highestConflictScore) {\n            // Move conflicting events\n            console.log(\"Moving conflicting events...\");\n            const storage = _lib_storage__WEBPACK_IMPORTED_MODULE_2__.StorageService.getInstance();\n            conflicts.forEach((conflict)=>{\n                // Move to next available time\n                const duration = new Date(conflict.endTime).getTime() - new Date(conflict.startTime).getTime();\n                const newStartTime = new Date(newEvent.endTime);\n                const newEndTime = new Date(newStartTime.getTime() + duration);\n                const updatedEvent = {\n                    ...conflict,\n                    startTime: newStartTime.toISOString(),\n                    endTime: newEndTime.toISOString()\n                };\n                console.log(\"Moving event:\", {\n                    event: conflict.title,\n                    from: conflict.startTime,\n                    to: updatedEvent.startTime\n                });\n                storage.updateTimeBlock(updatedEvent);\n            });\n            return newEvent;\n        } else {\n            // Find next available time for new event\n            console.log(\"Finding next available time for new event...\");\n            const duration = new Date(newEvent.endTime).getTime() - new Date(newEvent.startTime).getTime();\n            const lastConflict = conflicts.sort((a, b)=>new Date(b.endTime).getTime() - new Date(a.endTime).getTime())[0];\n            const newStartTime = new Date(lastConflict.endTime);\n            const newEndTime = new Date(newStartTime.getTime() + duration);\n            const rescheduledEvent = {\n                ...newEvent,\n                startTime: newStartTime.toISOString(),\n                endTime: newEndTime.toISOString()\n            };\n            console.log(\"Rescheduled new event:\", {\n                from: newEvent.startTime,\n                to: rescheduledEvent.startTime\n            });\n            return rescheduledEvent;\n        }\n    };\n    const parseTimeString = (timeStr)=>{\n        // Try ISO format first\n        let date = new Date(timeStr);\n        if (!isNaN(date.getTime())) {\n            return date;\n        }\n        // Try parsing human-readable time formats\n        const today = new Date();\n        const timeRegex = /(\\d{1,2}):(\\d{2})\\s*(AM|PM|am|pm)?/;\n        const match = timeStr.match(timeRegex);\n        if (match) {\n            let [_, hours, minutes, meridiem] = match;\n            let hour = parseInt(hours);\n            // Convert to 24-hour format if meridiem is provided\n            if (meridiem) {\n                if (meridiem.toUpperCase() === \"PM\" && hour < 12) hour += 12;\n                if (meridiem.toUpperCase() === \"AM\" && hour === 12) hour = 0;\n            }\n            date = new Date(today);\n            date.setHours(hour, parseInt(minutes), 0, 0);\n            return date;\n        }\n        throw new Error(\"Unable to parse time: \".concat(timeStr));\n    };\n    const parseDate = (dateStr)=>{\n        try {\n            // If it's just a time string, parse it as time\n            if (dateStr.match(/^\\d{1,2}:\\d{2}(\\s*[AaPp][Mm])?$/)) {\n                return parseTimeString(dateStr);\n            }\n            // Try parsing as full date\n            const date = new Date(dateStr);\n            if (!isNaN(date.getTime())) {\n                return date;\n            }\n            throw new Error(\"Invalid date: \".concat(dateStr));\n        } catch (error) {\n            console.error(\"Date parsing error:\", error);\n            throw new Error(\"Invalid date format: \".concat(dateStr));\n        }\n    };\n    const sendMessage = async (content)=>{\n        console.log(\"=== START sendMessage ===\");\n        setIsLoading(true);\n        try {\n            // Initialize agent\n            console.log(\"Initializing agent...\");\n            const { agent, prompt, functionHandlers } = await (0,_services_chatbot__WEBPACK_IMPORTED_MODULE_1__.initializeAgent)();\n            console.log(\"Agent initialized successfully\");\n            // Format the prompt\n            const formattedPrompt = await prompt.formatMessages({\n                input: content\n            });\n            // Call agent\n            console.log(\"Calling agent...\");\n            const response = await agent.invoke(formattedPrompt);\n            console.log(\"Agent response received:\", response);\n            // Extract content\n            let messageContent = response.content;\n            // Look for schedule task\n            const codeBlockMatch = messageContent.match(/```[\\s\\S]*?schedule_task\\(([\\s\\S]*?)\\)[\\s\\S]*?```/);\n            if (codeBlockMatch) {\n                const paramsText = codeBlockMatch[1];\n                const params = {\n                    title: (paramsText.match(/title=\"([^\"]+)\"/) || [])[1],\n                    startTime: (paramsText.match(/startTime=\"([^\"]+)\"/) || [])[1],\n                    endTime: (paramsText.match(/endTime=\"([^\"]+)\"/) || [])[1],\n                    priority: (paramsText.match(/priority=\"([^\"]+)\"/) || [])[1],\n                    location: (paramsText.match(/location=\"([^\"]+)\"/) || [])[1],\n                    needsTransport: paramsText.includes(\"needsTransport=True\"),\n                    delegatable: paramsText.includes(\"delegatable=True\")\n                };\n                if (params.title && params.startTime) {\n                    // Validate and parse dates\n                    const startTime = parseDate(params.startTime);\n                    const endTime = params.endTime ? parseDate(params.endTime) : new Date(startTime.getTime() + 60 * 60 * 1000);\n                    const storage = _lib_storage__WEBPACK_IMPORTED_MODULE_2__.StorageService.getInstance();\n                    const existingEvents = storage.getTimeBlocks();\n                    // Handle transportation if needed\n                    let transportDetails = null;\n                    if (params.needsTransport && params.location) {\n                        const taxiService = _services_taxiService__WEBPACK_IMPORTED_MODULE_3__.TaxiService.getInstance();\n                        const estimate = await taxiService.estimateTrip(\"current_location\", params.location);\n                        if (estimate.available) {\n                            // Add buffer time for transportation\n                            const pickupTime = new Date(startTime.getTime());\n                            pickupTime.setMinutes(pickupTime.getMinutes() - estimate.duration);\n                            // Process payment first\n                            const paymentDetails = await taxiService.getPaymentDetails(\"current_location\", params.location);\n                            let paymentStatus = \"Pending\";\n                            let transactionHash = \"\";\n                            if (paymentDetails.txHash) {\n                                // Wait for transaction confirmation\n                                const isConfirmed = await taxiService.verifyPayment(paymentDetails.txHash);\n                                paymentStatus = isConfirmed ? \"Confirmed\" : \"Failed\";\n                                transactionHash = paymentDetails.txHash;\n                                if (!isConfirmed) {\n                                    throw new Error(\"Payment failed to confirm\");\n                                }\n                            }\n                            const scheduledEvent = {\n                                _id: crypto.randomUUID(),\n                                title: params.title,\n                                startTime: pickupTime.toISOString(),\n                                endTime: endTime.toISOString(),\n                                priority: params.priority || \"important\",\n                                location: params.location,\n                                transportDetails: {\n                                    pickupTime: pickupTime.toISOString(),\n                                    paymentHash: transactionHash,\n                                    paymentStatus\n                                },\n                                delegatable: params.delegatable || false,\n                                status: \"scheduled\",\n                                created_at: new Date().toISOString(),\n                                updated_at: new Date().toISOString()\n                            };\n                            messageContent = \"\\uD83D\\uDCC5 Event Scheduled: \".concat(params.title, \"\\n⏰ Time: \").concat(startTime.toLocaleString(), \" - \").concat(endTime.toLocaleString(), \"\\n\\uD83D\\uDCCD Location: \").concat(params.location, \"\\n\\uD83D\\uDE95 Transport: Taxi booked for \").concat(pickupTime.toLocaleTimeString(), \"\\n\\uD83D\\uDCB0 Payment: \").concat(paymentStatus).concat(transactionHash ? \"\\n\\uD83D\\uDCB3 Transaction: \".concat(transactionHash) : \"\");\n                            const finalEvent = handleScheduleConflict(scheduledEvent, existingEvents);\n                            storage.addTimeBlock(finalEvent);\n                            const event = new CustomEvent(\"calendarUpdate\", {\n                                detail: finalEvent\n                            });\n                            window.dispatchEvent(event);\n                        }\n                    }\n                }\n            }\n            // Add message to chat history\n            setMessages((prev)=>[\n                    ...prev,\n                    {\n                        content: messageContent,\n                        role: \"assistant\",\n                        timestamp: new Date().toISOString()\n                    }\n                ]);\n        } catch (error) {\n            console.error(\"Error in sendMessage:\", error);\n            setMessages((prev)=>[\n                    ...prev,\n                    {\n                        content: \"Error: \".concat(error.message),\n                        role: \"system\",\n                        timestamp: new Date().toISOString()\n                    }\n                ]);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    return {\n        messages,\n        setMessages,\n        isLoading,\n        sendMessage\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useChatbot.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/services/taxiService.ts":
/*!*************************************!*\
  !*** ./src/services/taxiService.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TaxiService: function() { return /* binding */ TaxiService; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../../../node_modules/ethers/lib.esm/utils/units.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../../../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/* harmony import */ var _faucetService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./faucetService */ \"(app-pages-browser)/./src/services/faucetService.ts\");\n\n\nclass TaxiService {\n    static getInstance() {\n        if (!TaxiService.instance) {\n            TaxiService.instance = new TaxiService();\n        }\n        return TaxiService.instance;\n    }\n    async estimateTrip(from, to) {\n        // Mock estimation based on addresses\n        const mockDuration = Math.floor(Math.random() * 30) + 15; // 15-45 minutes\n        const cost = 0.000001; // Fixed cost in ETH for demo\n        return {\n            duration: mockDuration,\n            cost,\n            available: true\n        };\n    }\n    async getPaymentDetails(from, to) {\n        const estimate = await this.estimateTrip(from, to);\n        try {\n            // Process payment using FaucetService\n            const faucetService = _faucetService__WEBPACK_IMPORTED_MODULE_0__.FaucetService.getInstance();\n            const txHash = await faucetService.requestAndSendETH(this.TAXI_ADDRESS, estimate.cost);\n            console.log(\"Payment processed:\", {\n                to: this.TAXI_ADDRESS,\n                amount: estimate.cost,\n                txHash\n            });\n            return {\n                address: this.TAXI_ADDRESS,\n                amount: ethers__WEBPACK_IMPORTED_MODULE_1__.parseEther(estimate.cost.toString()).toString(),\n                network: \"base-sepolia\",\n                txHash\n            };\n        } catch (error) {\n            console.error(\"Failed to process payment:\", error);\n            return {\n                address: this.TAXI_ADDRESS,\n                amount: ethers__WEBPACK_IMPORTED_MODULE_1__.parseEther(estimate.cost.toString()).toString(),\n                network: \"base-sepolia\"\n            };\n        }\n    }\n    async verifyPayment(txHash) {\n        try {\n            const receipt = await this.provider.getTransactionReceipt(txHash);\n            return receipt !== null && receipt.status === 1;\n        } catch (error) {\n            console.error(\"Error verifying payment:\", error);\n            return false;\n        }\n    }\n    constructor(){\n        this.TAXI_ADDRESS = \"0x0680Fb58A8CF5c2f0090D9DC487003a8Ff49Abb6\";\n        this.provider = new ethers__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(\"https://sepolia.base.org\");\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zZXJ2aWNlcy90YXhpU2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdDO0FBQ2dCO0FBUXpDLE1BQU1FO0lBU1gsT0FBT0MsY0FBMkI7UUFDaEMsSUFBSSxDQUFDRCxZQUFZRSxRQUFRLEVBQUU7WUFDekJGLFlBQVlFLFFBQVEsR0FBRyxJQUFJRjtRQUM3QjtRQUNBLE9BQU9BLFlBQVlFLFFBQVE7SUFDN0I7SUFFQSxNQUFNQyxhQUFhQyxJQUFZLEVBQUVDLEVBQVUsRUFBeUI7UUFDbEUscUNBQXFDO1FBQ3JDLE1BQU1DLGVBQWVDLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsTUFBTSxLQUFLLE1BQU0sSUFBSSxnQkFBZ0I7UUFDMUUsTUFBTUMsT0FBTyxVQUFVLDZCQUE2QjtRQUVwRCxPQUFPO1lBQ0xDLFVBQVVMO1lBQ1ZJO1lBQ0FFLFdBQVc7UUFDYjtJQUNGO0lBRUEsTUFBTUMsa0JBQWtCVCxJQUFZLEVBQUVDLEVBQVUsRUFLN0M7UUFDRCxNQUFNUyxXQUFXLE1BQU0sSUFBSSxDQUFDWCxZQUFZLENBQUNDLE1BQU1DO1FBRS9DLElBQUk7WUFDRixzQ0FBc0M7WUFDdEMsTUFBTVUsZ0JBQWdCaEIseURBQWFBLENBQUNFLFdBQVc7WUFDL0MsTUFBTWUsU0FBUyxNQUFNRCxjQUFjRSxpQkFBaUIsQ0FDbEQsSUFBSSxDQUFDQyxZQUFZLEVBQ2pCSixTQUFTSixJQUFJO1lBR2ZTLFFBQVFDLEdBQUcsQ0FBQyxzQkFBc0I7Z0JBQ2hDZixJQUFJLElBQUksQ0FBQ2EsWUFBWTtnQkFDckJHLFFBQVFQLFNBQVNKLElBQUk7Z0JBQ3JCTTtZQUNGO1lBRUEsT0FBTztnQkFDTE0sU0FBUyxJQUFJLENBQUNKLFlBQVk7Z0JBQzFCRyxRQUFRdkIsOENBQWlCLENBQUNnQixTQUFTSixJQUFJLENBQUNjLFFBQVEsSUFBSUEsUUFBUTtnQkFDNURDLFNBQVM7Z0JBQ1RUO1lBQ0Y7UUFDRixFQUFFLE9BQU9VLE9BQU87WUFDZFAsUUFBUU8sS0FBSyxDQUFDLDhCQUE4QkE7WUFDNUMsT0FBTztnQkFDTEosU0FBUyxJQUFJLENBQUNKLFlBQVk7Z0JBQzFCRyxRQUFRdkIsOENBQWlCLENBQUNnQixTQUFTSixJQUFJLENBQUNjLFFBQVEsSUFBSUEsUUFBUTtnQkFDNURDLFNBQVM7WUFDWDtRQUNGO0lBQ0Y7SUFFQSxNQUFNRSxjQUFjWCxNQUFjLEVBQW9CO1FBQ3BELElBQUk7WUFDRixNQUFNWSxVQUFVLE1BQU0sSUFBSSxDQUFDQyxRQUFRLENBQUNDLHFCQUFxQixDQUFDZDtZQUMxRCxPQUFPWSxZQUFZLFFBQVFBLFFBQVFHLE1BQU0sS0FBSztRQUNoRCxFQUFFLE9BQU9MLE9BQU87WUFDZFAsUUFBUU8sS0FBSyxDQUFDLDRCQUE0QkE7WUFDMUMsT0FBTztRQUNUO0lBQ0Y7SUFyRUEsYUFBc0I7YUFGTFIsZUFBZTtRQUc5QixJQUFJLENBQUNXLFFBQVEsR0FBRyxJQUFJL0IsbURBQXNCLENBQUM7SUFDN0M7QUFvRUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3NlcnZpY2VzL3RheGlTZXJ2aWNlLnRzP2FjOTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXRoZXJzIH0gZnJvbSAnZXRoZXJzJztcbmltcG9ydCB7IEZhdWNldFNlcnZpY2UgfSBmcm9tICcuL2ZhdWNldFNlcnZpY2UnO1xuXG5pbnRlcmZhY2UgVGF4aUVzdGltYXRlIHtcbiAgZHVyYXRpb246IG51bWJlcjsgIC8vIGluIG1pbnV0ZXNcbiAgY29zdDogbnVtYmVyOyAgICAgLy8gaW4gRVRIXG4gIGF2YWlsYWJsZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIFRheGlTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFRheGlTZXJ2aWNlO1xuICBwcml2YXRlIHByb3ZpZGVyOiBldGhlcnMuSnNvblJwY1Byb3ZpZGVyO1xuICBwcml2YXRlIHJlYWRvbmx5IFRBWElfQUREUkVTUyA9ICcweDA2ODBGYjU4QThDRjVjMmYwMDkwRDlEQzQ4NzAwM2E4RmY0OUFiYjYnO1xuICBcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnByb3ZpZGVyID0gbmV3IGV0aGVycy5Kc29uUnBjUHJvdmlkZXIoJ2h0dHBzOi8vc2Vwb2xpYS5iYXNlLm9yZycpO1xuICB9XG5cbiAgc3RhdGljIGdldEluc3RhbmNlKCk6IFRheGlTZXJ2aWNlIHtcbiAgICBpZiAoIVRheGlTZXJ2aWNlLmluc3RhbmNlKSB7XG4gICAgICBUYXhpU2VydmljZS5pbnN0YW5jZSA9IG5ldyBUYXhpU2VydmljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gVGF4aVNlcnZpY2UuaW5zdGFuY2U7XG4gIH1cblxuICBhc3luYyBlc3RpbWF0ZVRyaXAoZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nKTogUHJvbWlzZTxUYXhpRXN0aW1hdGU+IHtcbiAgICAvLyBNb2NrIGVzdGltYXRpb24gYmFzZWQgb24gYWRkcmVzc2VzXG4gICAgY29uc3QgbW9ja0R1cmF0aW9uID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMzApICsgMTU7IC8vIDE1LTQ1IG1pbnV0ZXNcbiAgICBjb25zdCBjb3N0ID0gMC4wMDAwMDE7IC8vIEZpeGVkIGNvc3QgaW4gRVRIIGZvciBkZW1vXG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIGR1cmF0aW9uOiBtb2NrRHVyYXRpb24sXG4gICAgICBjb3N0LFxuICAgICAgYXZhaWxhYmxlOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIGdldFBheW1lbnREZXRhaWxzKGZyb206IHN0cmluZywgdG86IHN0cmluZyk6IFByb21pc2U8e1xuICAgIGFkZHJlc3M6IHN0cmluZyxcbiAgICBhbW91bnQ6IHN0cmluZyxcbiAgICBuZXR3b3JrOiBzdHJpbmcsXG4gICAgdHhIYXNoPzogc3RyaW5nXG4gIH0+IHtcbiAgICBjb25zdCBlc3RpbWF0ZSA9IGF3YWl0IHRoaXMuZXN0aW1hdGVUcmlwKGZyb20sIHRvKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgLy8gUHJvY2VzcyBwYXltZW50IHVzaW5nIEZhdWNldFNlcnZpY2VcbiAgICAgIGNvbnN0IGZhdWNldFNlcnZpY2UgPSBGYXVjZXRTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gICAgICBjb25zdCB0eEhhc2ggPSBhd2FpdCBmYXVjZXRTZXJ2aWNlLnJlcXVlc3RBbmRTZW5kRVRIKFxuICAgICAgICB0aGlzLlRBWElfQUREUkVTUyxcbiAgICAgICAgZXN0aW1hdGUuY29zdFxuICAgICAgKTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coJ1BheW1lbnQgcHJvY2Vzc2VkOicsIHtcbiAgICAgICAgdG86IHRoaXMuVEFYSV9BRERSRVNTLFxuICAgICAgICBhbW91bnQ6IGVzdGltYXRlLmNvc3QsXG4gICAgICAgIHR4SGFzaFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFkZHJlc3M6IHRoaXMuVEFYSV9BRERSRVNTLFxuICAgICAgICBhbW91bnQ6IGV0aGVycy5wYXJzZUV0aGVyKGVzdGltYXRlLmNvc3QudG9TdHJpbmcoKSkudG9TdHJpbmcoKSxcbiAgICAgICAgbmV0d29yazogJ2Jhc2Utc2Vwb2xpYScsXG4gICAgICAgIHR4SGFzaFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHByb2Nlc3MgcGF5bWVudDonLCBlcnJvcik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhZGRyZXNzOiB0aGlzLlRBWElfQUREUkVTUyxcbiAgICAgICAgYW1vdW50OiBldGhlcnMucGFyc2VFdGhlcihlc3RpbWF0ZS5jb3N0LnRvU3RyaW5nKCkpLnRvU3RyaW5nKCksXG4gICAgICAgIG5ldHdvcms6ICdiYXNlLXNlcG9saWEnXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHZlcmlmeVBheW1lbnQodHhIYXNoOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVjZWlwdCA9IGF3YWl0IHRoaXMucHJvdmlkZXIuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KHR4SGFzaCk7XG4gICAgICByZXR1cm4gcmVjZWlwdCAhPT0gbnVsbCAmJiByZWNlaXB0LnN0YXR1cyA9PT0gMTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdmVyaWZ5aW5nIHBheW1lbnQ6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSAiXSwibmFtZXMiOlsiZXRoZXJzIiwiRmF1Y2V0U2VydmljZSIsIlRheGlTZXJ2aWNlIiwiZ2V0SW5zdGFuY2UiLCJpbnN0YW5jZSIsImVzdGltYXRlVHJpcCIsImZyb20iLCJ0byIsIm1vY2tEdXJhdGlvbiIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImNvc3QiLCJkdXJhdGlvbiIsImF2YWlsYWJsZSIsImdldFBheW1lbnREZXRhaWxzIiwiZXN0aW1hdGUiLCJmYXVjZXRTZXJ2aWNlIiwidHhIYXNoIiwicmVxdWVzdEFuZFNlbmRFVEgiLCJUQVhJX0FERFJFU1MiLCJjb25zb2xlIiwibG9nIiwiYW1vdW50IiwiYWRkcmVzcyIsInBhcnNlRXRoZXIiLCJ0b1N0cmluZyIsIm5ldHdvcmsiLCJlcnJvciIsInZlcmlmeVBheW1lbnQiLCJyZWNlaXB0IiwicHJvdmlkZXIiLCJnZXRUcmFuc2FjdGlvblJlY2VpcHQiLCJzdGF0dXMiLCJKc29uUnBjUHJvdmlkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/taxiService.ts\n"));

/***/ })

});