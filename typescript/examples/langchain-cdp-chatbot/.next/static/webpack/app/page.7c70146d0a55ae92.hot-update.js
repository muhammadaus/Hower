"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/hooks/useChatbot.ts":
/*!*********************************!*\
  !*** ./src/hooks/useChatbot.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChatbot: function() { return /* binding */ useChatbot; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _services_chatbot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/services/chatbot */ \"(app-pages-browser)/./src/services/chatbot.ts\");\n/* harmony import */ var _lib_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/storage */ \"(app-pages-browser)/./src/lib/storage.ts\");\n/* harmony import */ var _services_taxiService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/taxiService */ \"(app-pages-browser)/./src/services/taxiService.ts\");\n/* __next_internal_client_entry_do_not_use__ useChatbot auto */ \n\n\n\nfunction useChatbot() {\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Load chat history from localStorage on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const savedMessages = localStorage.getItem(\"chat_history\");\n        if (savedMessages) {\n            setMessages(JSON.parse(savedMessages));\n        }\n    }, []);\n    // Save messages to localStorage whenever they change\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n    }, [\n        messages\n    ]);\n    const handleScheduleConflict = (newEvent, existingEvents)=>{\n        console.log(\"Checking conflicts for new event:\", {\n            title: newEvent.title,\n            start: newEvent.startTime,\n            priority: newEvent.priority\n        });\n        console.log(\"Existing events:\", existingEvents);\n        // Sort existing events by priority\n        const priorityOrder = {\n            \"urgent-important\": 3,\n            \"important\": 2,\n            \"urgent\": 1,\n            \"neither\": 0\n        };\n        // Find conflicting events\n        const conflicts = existingEvents.filter((event)=>{\n            const newStart = new Date(newEvent.startTime);\n            const newEnd = new Date(newEvent.endTime);\n            const eventStart = new Date(event.startTime);\n            const eventEnd = new Date(event.endTime);\n            const hasConflict = newStart >= eventStart && newStart < eventEnd || newEnd > eventStart && newEnd <= eventEnd || newStart <= eventStart && newEnd >= eventEnd;\n            if (hasConflict) {\n                console.log(\"Found conflict:\", {\n                    existingEvent: event.title,\n                    existingPriority: event.priority,\n                    newEvent: newEvent.title,\n                    newPriority: newEvent.priority\n                });\n            }\n            return hasConflict;\n        });\n        if (conflicts.length === 0) {\n            console.log(\"No conflicts found\");\n            return newEvent;\n        }\n        // Check if new event has higher priority\n        const newPriorityScore = priorityOrder[newEvent.priority];\n        const highestConflictScore = Math.max(...conflicts.map((e)=>priorityOrder[e.priority]));\n        console.log(\"Priority comparison:\", {\n            newEventScore: newPriorityScore,\n            highestConflictScore,\n            willRescheduleConflicts: newPriorityScore > highestConflictScore\n        });\n        if (newPriorityScore > highestConflictScore) {\n            // Move conflicting events\n            console.log(\"Moving conflicting events...\");\n            const storage = _lib_storage__WEBPACK_IMPORTED_MODULE_2__.StorageService.getInstance();\n            conflicts.forEach((conflict)=>{\n                // Move to next available time\n                const duration = new Date(conflict.endTime).getTime() - new Date(conflict.startTime).getTime();\n                const newStartTime = new Date(newEvent.endTime);\n                const newEndTime = new Date(newStartTime.getTime() + duration);\n                const updatedEvent = {\n                    ...conflict,\n                    startTime: newStartTime.toISOString(),\n                    endTime: newEndTime.toISOString()\n                };\n                console.log(\"Moving event:\", {\n                    event: conflict.title,\n                    from: conflict.startTime,\n                    to: updatedEvent.startTime\n                });\n                storage.updateTimeBlock(updatedEvent);\n            });\n            return newEvent;\n        } else {\n            // Find next available time for new event\n            console.log(\"Finding next available time for new event...\");\n            const duration = new Date(newEvent.endTime).getTime() - new Date(newEvent.startTime).getTime();\n            const lastConflict = conflicts.sort((a, b)=>new Date(b.endTime).getTime() - new Date(a.endTime).getTime())[0];\n            const newStartTime = new Date(lastConflict.endTime);\n            const newEndTime = new Date(newStartTime.getTime() + duration);\n            const rescheduledEvent = {\n                ...newEvent,\n                startTime: newStartTime.toISOString(),\n                endTime: newEndTime.toISOString()\n            };\n            console.log(\"Rescheduled new event:\", {\n                from: newEvent.startTime,\n                to: rescheduledEvent.startTime\n            });\n            return rescheduledEvent;\n        }\n    };\n    const parseTimeString = (timeStr)=>{\n        // Try ISO format first\n        let date = new Date(timeStr);\n        if (!isNaN(date.getTime())) {\n            return date;\n        }\n        // Try parsing human-readable time formats\n        const today = new Date();\n        const timeRegex = /(\\d{1,2}):(\\d{2})\\s*(AM|PM|am|pm)?/;\n        const match = timeStr.match(timeRegex);\n        if (match) {\n            let [_, hours, minutes, meridiem] = match;\n            let hour = parseInt(hours);\n            // Convert to 24-hour format if meridiem is provided\n            if (meridiem) {\n                if (meridiem.toUpperCase() === \"PM\" && hour < 12) hour += 12;\n                if (meridiem.toUpperCase() === \"AM\" && hour === 12) hour = 0;\n            }\n            date = new Date(today);\n            date.setHours(hour, parseInt(minutes), 0, 0);\n            return date;\n        }\n        throw new Error(\"Unable to parse time: \".concat(timeStr));\n    };\n    const parseDate = (dateStr)=>{\n        try {\n            // If it's just a time string, parse it as time\n            if (dateStr.match(/^\\d{1,2}:\\d{2}(\\s*[AaPp][Mm])?$/)) {\n                return parseTimeString(dateStr);\n            }\n            // Try parsing as full date\n            const date = new Date(dateStr);\n            if (!isNaN(date.getTime())) {\n                return date;\n            }\n            throw new Error(\"Invalid date: \".concat(dateStr));\n        } catch (error) {\n            console.error(\"Date parsing error:\", error);\n            throw new Error(\"Invalid date format: \".concat(dateStr));\n        }\n    };\n    const sendMessage = async (content)=>{\n        console.log(\"=== START sendMessage ===\");\n        setIsLoading(true);\n        try {\n            // Initialize agent\n            console.log(\"Initializing agent...\");\n            const { agent, prompt, functionHandlers } = await (0,_services_chatbot__WEBPACK_IMPORTED_MODULE_1__.initializeAgent)();\n            console.log(\"Agent initialized successfully\");\n            // Format the prompt\n            const formattedPrompt = await prompt.formatMessages({\n                input: content\n            });\n            // Call agent\n            console.log(\"Calling agent...\");\n            const response = await agent.invoke(formattedPrompt);\n            console.log(\"Agent response received:\", response);\n            // Extract content\n            let messageContent = response.content;\n            // Look for schedule task\n            const codeBlockMatch = messageContent.match(/```[\\s\\S]*?schedule_task\\(([\\s\\S]*?)\\)[\\s\\S]*?```/);\n            if (codeBlockMatch) {\n                const paramsText = codeBlockMatch[1];\n                const params = {\n                    title: (paramsText.match(/title=\"([^\"]+)\"/) || [])[1],\n                    startTime: (paramsText.match(/startTime=\"([^\"]+)\"/) || [])[1],\n                    endTime: (paramsText.match(/endTime=\"([^\"]+)\"/) || [])[1],\n                    priority: (paramsText.match(/priority=\"([^\"]+)\"/) || [])[1],\n                    location: (paramsText.match(/location=\"([^\"]+)\"/) || [])[1],\n                    needsTransport: paramsText.includes(\"needsTransport=True\"),\n                    delegatable: paramsText.includes(\"delegatable=True\")\n                };\n                if (params.title && params.startTime) {\n                    // Validate and parse dates\n                    const startTime = parseDate(params.startTime);\n                    const endTime = params.endTime ? parseDate(params.endTime) : new Date(startTime.getTime() + 60 * 60 * 1000);\n                    const storage = _lib_storage__WEBPACK_IMPORTED_MODULE_2__.StorageService.getInstance();\n                    const existingEvents = storage.getTimeBlocks();\n                    // Handle transportation if needed\n                    let transportDetails = null;\n                    if (params.needsTransport && params.location) {\n                        const taxiService = _services_taxiService__WEBPACK_IMPORTED_MODULE_3__.TaxiService.getInstance();\n                        const estimate = await taxiService.estimateTrip(\"current_location\", params.location);\n                        if (estimate.available) {\n                            // Add buffer time for transportation\n                            const pickupTime = new Date(startTime.getTime());\n                            pickupTime.setMinutes(pickupTime.getMinutes() - estimate.duration);\n                            const scheduledEvent = {\n                                _id: crypto.randomUUID(),\n                                title: params.title,\n                                startTime: pickupTime.toISOString(),\n                                endTime: endTime.toISOString(),\n                                priority: params.priority || \"important\",\n                                location: params.location,\n                                transportDetails,\n                                delegatable: params.delegatable || false,\n                                status: \"scheduled\",\n                                created_at: new Date().toISOString(),\n                                updated_at: new Date().toISOString()\n                            };\n                            // Get payment details\n                            const paymentDetails = await taxiService.getPaymentDetails(\"current_location\", params.location);\n                            messageContent = \"\\uD83D\\uDCC5 Event Scheduled: \".concat(params.title, \"\\n⏰ Time: \").concat(startTime.toLocaleString(), \" - \").concat(endTime.toLocaleString(), \"\\n\\uD83D\\uDCCD Location: \").concat(params.location, \"\\n\\uD83D\\uDE95 Transport: Taxi booked for \").concat(estimate.duration, \" minutes before event\\n\\uD83D\\uDCB0 Payment: \").concat(paymentDetails.txHash ? \"Processing...\" : \"Pending\", \"\\n\").concat(paymentDetails.txHash ? \"Transaction: \".concat(paymentDetails.txHash) : \"\");\n                            const finalEvent = handleScheduleConflict(scheduledEvent, existingEvents);\n                            storage.addTimeBlock(finalEvent);\n                            const event = new CustomEvent(\"calendarUpdate\", {\n                                detail: finalEvent\n                            });\n                            window.dispatchEvent(event);\n                        }\n                    }\n                }\n            }\n            // Add message to chat history\n            setMessages((prev)=>[\n                    ...prev,\n                    {\n                        content: messageContent,\n                        role: \"assistant\",\n                        timestamp: new Date().toISOString()\n                    }\n                ]);\n        } catch (error) {\n            console.error(\"Error in sendMessage:\", error);\n            setMessages((prev)=>[\n                    ...prev,\n                    {\n                        content: \"Error: \".concat(error.message),\n                        role: \"system\",\n                        timestamp: new Date().toISOString()\n                    }\n                ]);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    return {\n        messages,\n        setMessages,\n        isLoading,\n        sendMessage\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useChatbot.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/services/chatbot.ts":
/*!*********************************!*\
  !*** ./src/services/chatbot.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initializeAgent: function() { return /* binding */ initializeAgent; }\n/* harmony export */ });\n/* harmony import */ var _langchain_google_genai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/google-genai */ \"(app-pages-browser)/../../../node_modules/@langchain/google-genai/index.js\");\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/prompts */ \"(app-pages-browser)/../../../node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _taxiService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./taxiService */ \"(app-pages-browser)/./src/services/taxiService.ts\");\n\n\n\nasync function initializeAgent() {\n    try {\n        console.log(\"Initializing Google AI...\");\n        // Create the model\n        const model = new _langchain_google_genai__WEBPACK_IMPORTED_MODULE_0__.ChatGoogleGenerativeAI({\n            apiKey: \"AIzaSyDJcsRmDoYaG1na_gg7z9-WoSTe82sXwPA\",\n            modelName: \"gemini-pro\",\n            temperature: 0.7\n        });\n        // Create a prompt template with specific format instructions\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__.ChatPromptTemplate.fromMessages([\n            [\n                \"system\",\n                'You are a helpful assistant that schedules events and handles transportation. Format your responses clearly:\\n\\n      1. First confirm the event details:\\n         ```\\n         schedule_task(\\n           title=\"[title]\",\\n           startTime=\"YYYY-MM-DDTHH:mm:ss\",\\n           endTime=\"YYYY-MM-DDTHH:mm:ss\",\\n           priority=\"[priority]\",\\n           location=\"[location]\",\\n           needsTransport=[true/false]\\n         )\\n         ```\\n\\n      2. If transport is needed:\\n         ```\\n         book_taxi(\\n           pickup=\"[location]\",\\n           destination=\"[location]\",\\n           pickupTime=\"HH:mm\"\\n         )\\n         ```\\n\\n      3. After booking, verify payment:\\n         ```\\n         verify_payment(txHash=\"[hash]\")\\n         ```\\n\\n      Respond in this format:\\n      \\uD83D\\uDCC5 Event Scheduled: [title]\\n      ⏰ Time: [start] - [end]\\n      \\uD83D\\uDCCD Location: [location]\\n      \\uD83D\\uDE95 Transport: [details if needed]\\n      \\uD83D\\uDCB0 Payment: [status]\\n      \\n      Keep responses concise and well-formatted.\\n      For times, you can use either ISO format (YYYY-MM-DDTHH:mm:ss) or 12-hour format (HH:mm AM/PM).'\n            ],\n            [\n                \"human\",\n                \"{input}\"\n            ]\n        ]);\n        // Create function handlers\n        const functionHandlers = {\n            async book_taxi (params) {\n                const taxiService = _taxiService__WEBPACK_IMPORTED_MODULE_2__.TaxiService.getInstance();\n                const paymentDetails = await taxiService.getPaymentDetails(params.pickup, params.destination);\n                return paymentDetails;\n            },\n            async verify_payment (params) {\n                const taxiService = _taxiService__WEBPACK_IMPORTED_MODULE_2__.TaxiService.getInstance();\n                const verified = await taxiService.verifyPayment(params.txHash);\n                return verified;\n            }\n        };\n        console.log(\"Google AI initialized\");\n        return {\n            agent: model,\n            prompt,\n            functionHandlers,\n            config: {}\n        };\n    } catch (error) {\n        console.error(\"Error initializing agent:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zZXJ2aWNlcy9jaGF0Ym90LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUU7QUFDSjtBQUNqQjtBQUVyQyxlQUFlRztJQUNwQixJQUFJO1FBQ0ZDLFFBQVFDLEdBQUcsQ0FBQztRQUVaLG1CQUFtQjtRQUNuQixNQUFNQyxRQUFRLElBQUlOLDJFQUFzQkEsQ0FBQztZQUN2Q08sUUFBUUMseUNBQXNDO1lBQzlDRyxXQUFXO1lBQ1hDLGFBQWE7UUFDZjtRQUVBLDZEQUE2RDtRQUM3RCxNQUFNQyxTQUFTWix1RUFBa0JBLENBQUNhLFlBQVksQ0FBQztZQUM3QztnQkFBQztnQkFBVzthQW9DcUY7WUFDakc7Z0JBQUM7Z0JBQVM7YUFBVTtTQUNyQjtRQUVELDJCQUEyQjtRQUMzQixNQUFNQyxtQkFBbUI7WUFDdkIsTUFBTUMsV0FBVUMsTUFBVztnQkFDekIsTUFBTUMsY0FBY2hCLHFEQUFXQSxDQUFDaUIsV0FBVztnQkFDM0MsTUFBTUMsaUJBQWlCLE1BQU1GLFlBQVlHLGlCQUFpQixDQUN4REosT0FBT0ssTUFBTSxFQUNiTCxPQUFPTSxXQUFXO2dCQUVwQixPQUFPSDtZQUNUO1lBQ0EsTUFBTUksZ0JBQWVQLE1BQVc7Z0JBQzlCLE1BQU1DLGNBQWNoQixxREFBV0EsQ0FBQ2lCLFdBQVc7Z0JBQzNDLE1BQU1NLFdBQVcsTUFBTVAsWUFBWVEsYUFBYSxDQUFDVCxPQUFPVSxNQUFNO2dCQUM5RCxPQUFPRjtZQUNUO1FBQ0Y7UUFFQXJCLFFBQVFDLEdBQUcsQ0FBQztRQUVaLE9BQU87WUFDTHVCLE9BQU90QjtZQUNQTztZQUNBRTtZQUNBYyxRQUFRLENBQUM7UUFDWDtJQUNGLEVBQUUsT0FBT0MsT0FBTztRQUNkMUIsUUFBUTBCLEtBQUssQ0FBQyw2QkFBNkJBO1FBQzNDLE1BQU1BO0lBQ1I7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvc2VydmljZXMvY2hhdGJvdC50cz82NTliIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYXRHb29nbGVHZW5lcmF0aXZlQUkgfSBmcm9tIFwiQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWlcIjtcbmltcG9ydCB7IENoYXRQcm9tcHRUZW1wbGF0ZSB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvcHJvbXB0c1wiO1xuaW1wb3J0IHsgVGF4aVNlcnZpY2UgfSBmcm9tICcuL3RheGlTZXJ2aWNlJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVBZ2VudCgpIHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZygnSW5pdGlhbGl6aW5nIEdvb2dsZSBBSS4uLicpO1xuICAgIFxuICAgIC8vIENyZWF0ZSB0aGUgbW9kZWxcbiAgICBjb25zdCBtb2RlbCA9IG5ldyBDaGF0R29vZ2xlR2VuZXJhdGl2ZUFJKHtcbiAgICAgIGFwaUtleTogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR09PR0xFX0FQSV9LRVksXG4gICAgICBtb2RlbE5hbWU6IFwiZ2VtaW5pLXByb1wiLFxuICAgICAgdGVtcGVyYXR1cmU6IDAuNyxcbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSBhIHByb21wdCB0ZW1wbGF0ZSB3aXRoIHNwZWNpZmljIGZvcm1hdCBpbnN0cnVjdGlvbnNcbiAgICBjb25zdCBwcm9tcHQgPSBDaGF0UHJvbXB0VGVtcGxhdGUuZnJvbU1lc3NhZ2VzKFtcbiAgICAgIFtcInN5c3RlbVwiLCBgWW91IGFyZSBhIGhlbHBmdWwgYXNzaXN0YW50IHRoYXQgc2NoZWR1bGVzIGV2ZW50cyBhbmQgaGFuZGxlcyB0cmFuc3BvcnRhdGlvbi4gRm9ybWF0IHlvdXIgcmVzcG9uc2VzIGNsZWFybHk6XG5cbiAgICAgIDEuIEZpcnN0IGNvbmZpcm0gdGhlIGV2ZW50IGRldGFpbHM6XG4gICAgICAgICBcXGBcXGBcXGBcbiAgICAgICAgIHNjaGVkdWxlX3Rhc2soXG4gICAgICAgICAgIHRpdGxlPVwiW3RpdGxlXVwiLFxuICAgICAgICAgICBzdGFydFRpbWU9XCJZWVlZLU1NLUREVEhIOm1tOnNzXCIsXG4gICAgICAgICAgIGVuZFRpbWU9XCJZWVlZLU1NLUREVEhIOm1tOnNzXCIsXG4gICAgICAgICAgIHByaW9yaXR5PVwiW3ByaW9yaXR5XVwiLFxuICAgICAgICAgICBsb2NhdGlvbj1cIltsb2NhdGlvbl1cIixcbiAgICAgICAgICAgbmVlZHNUcmFuc3BvcnQ9W3RydWUvZmFsc2VdXG4gICAgICAgICApXG4gICAgICAgICBcXGBcXGBcXGBcblxuICAgICAgMi4gSWYgdHJhbnNwb3J0IGlzIG5lZWRlZDpcbiAgICAgICAgIFxcYFxcYFxcYFxuICAgICAgICAgYm9va190YXhpKFxuICAgICAgICAgICBwaWNrdXA9XCJbbG9jYXRpb25dXCIsXG4gICAgICAgICAgIGRlc3RpbmF0aW9uPVwiW2xvY2F0aW9uXVwiLFxuICAgICAgICAgICBwaWNrdXBUaW1lPVwiSEg6bW1cIlxuICAgICAgICAgKVxuICAgICAgICAgXFxgXFxgXFxgXG5cbiAgICAgIDMuIEFmdGVyIGJvb2tpbmcsIHZlcmlmeSBwYXltZW50OlxuICAgICAgICAgXFxgXFxgXFxgXG4gICAgICAgICB2ZXJpZnlfcGF5bWVudCh0eEhhc2g9XCJbaGFzaF1cIilcbiAgICAgICAgIFxcYFxcYFxcYFxuXG4gICAgICBSZXNwb25kIGluIHRoaXMgZm9ybWF0OlxuICAgICAg8J+ThSBFdmVudCBTY2hlZHVsZWQ6IFt0aXRsZV1cbiAgICAgIOKPsCBUaW1lOiBbc3RhcnRdIC0gW2VuZF1cbiAgICAgIPCfk40gTG9jYXRpb246IFtsb2NhdGlvbl1cbiAgICAgIPCfmpUgVHJhbnNwb3J0OiBbZGV0YWlscyBpZiBuZWVkZWRdXG4gICAgICDwn5KwIFBheW1lbnQ6IFtzdGF0dXNdXG4gICAgICBcbiAgICAgIEtlZXAgcmVzcG9uc2VzIGNvbmNpc2UgYW5kIHdlbGwtZm9ybWF0dGVkLlxuICAgICAgRm9yIHRpbWVzLCB5b3UgY2FuIHVzZSBlaXRoZXIgSVNPIGZvcm1hdCAoWVlZWS1NTS1ERFRISDptbTpzcykgb3IgMTItaG91ciBmb3JtYXQgKEhIOm1tIEFNL1BNKS5gXSxcbiAgICAgIFtcImh1bWFuXCIsIFwie2lucHV0fVwiXVxuICAgIF0pO1xuXG4gICAgLy8gQ3JlYXRlIGZ1bmN0aW9uIGhhbmRsZXJzXG4gICAgY29uc3QgZnVuY3Rpb25IYW5kbGVycyA9IHtcbiAgICAgIGFzeW5jIGJvb2tfdGF4aShwYXJhbXM6IGFueSkge1xuICAgICAgICBjb25zdCB0YXhpU2VydmljZSA9IFRheGlTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnREZXRhaWxzID0gYXdhaXQgdGF4aVNlcnZpY2UuZ2V0UGF5bWVudERldGFpbHMoXG4gICAgICAgICAgcGFyYW1zLnBpY2t1cCxcbiAgICAgICAgICBwYXJhbXMuZGVzdGluYXRpb25cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHBheW1lbnREZXRhaWxzO1xuICAgICAgfSxcbiAgICAgIGFzeW5jIHZlcmlmeV9wYXltZW50KHBhcmFtczogYW55KSB7XG4gICAgICAgIGNvbnN0IHRheGlTZXJ2aWNlID0gVGF4aVNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgY29uc3QgdmVyaWZpZWQgPSBhd2FpdCB0YXhpU2VydmljZS52ZXJpZnlQYXltZW50KHBhcmFtcy50eEhhc2gpO1xuICAgICAgICByZXR1cm4gdmVyaWZpZWQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnNvbGUubG9nKCdHb29nbGUgQUkgaW5pdGlhbGl6ZWQnKTtcblxuICAgIHJldHVybiB7XG4gICAgICBhZ2VudDogbW9kZWwsXG4gICAgICBwcm9tcHQsXG4gICAgICBmdW5jdGlvbkhhbmRsZXJzLFxuICAgICAgY29uZmlnOiB7fVxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW5pdGlhbGl6aW5nIGFnZW50OicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufSJdLCJuYW1lcyI6WyJDaGF0R29vZ2xlR2VuZXJhdGl2ZUFJIiwiQ2hhdFByb21wdFRlbXBsYXRlIiwiVGF4aVNlcnZpY2UiLCJpbml0aWFsaXplQWdlbnQiLCJjb25zb2xlIiwibG9nIiwibW9kZWwiLCJhcGlLZXkiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfR09PR0xFX0FQSV9LRVkiLCJtb2RlbE5hbWUiLCJ0ZW1wZXJhdHVyZSIsInByb21wdCIsImZyb21NZXNzYWdlcyIsImZ1bmN0aW9uSGFuZGxlcnMiLCJib29rX3RheGkiLCJwYXJhbXMiLCJ0YXhpU2VydmljZSIsImdldEluc3RhbmNlIiwicGF5bWVudERldGFpbHMiLCJnZXRQYXltZW50RGV0YWlscyIsInBpY2t1cCIsImRlc3RpbmF0aW9uIiwidmVyaWZ5X3BheW1lbnQiLCJ2ZXJpZmllZCIsInZlcmlmeVBheW1lbnQiLCJ0eEhhc2giLCJhZ2VudCIsImNvbmZpZyIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/chatbot.ts\n"));

/***/ })

});